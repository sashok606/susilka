#include "Control.h"
#include <Arduino.h>
#include <math.h>
#include "../Config.h"
#include "Calibration.h"         // –¥–ª—è –∫–æ—Ä–µ–∫—Ü—ñ—ó –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
#include "../actuators/ACDimmer.h"  // —Ñ–∞–∑–æ–≤–∏–π –¥–∏–º–º–µ—Ä –¥–ª—è AC –º–æ—Ç–æ—Ä—ñ–≤

// ===== PWM / Pins (–¥–ª—è DC-–≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤; –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —Ä–µ–∑–µ—Ä–≤) =====
static const int PWM_FREQ = 25000;
static const int PWM_RES  = 8;
static const int CH_FAN1  = 0; // –ü—ñ–¥–¥—É–≤ (PWM, —è–∫—â–æ DC)
static const int CH_FAN3  = 2; // –í–∏—Ç—è–∂–∫–∞ (PWM, —è–∫—â–æ DC)

// –ü–æ—Ç–æ—á–Ω—ñ –ø—ñ–Ω–∏ (–º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ —É CFG::cfg.pins)
// –ó–ê–£–í–ê–ñ: —Ü—ñ –ø—ñ–Ω-–∏ —Å—Ç–æ—Å—É—é—Ç—å—Å—è DC-–∫–µ—Ä—É–≤–∞–Ω–Ω—è ledc. –î–ª—è AC-–¥–∏–º–º–µ—Ä–∞ ‚Äî –¥–∏–≤–∏—Å—å ZC/DIM –Ω–∏–∂—á–µ.
static int PIN_FAN1 = 14; // PWM (DC –≤–∞—Ä—ñ–∞–Ω—Ç)
static int PIN_FAN2 = 15; // DIGITAL ON/OFF (—Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü—ñ—è)
static int PIN_FAN3 = 16; // PWM (DC –≤–∞—Ä—ñ–∞–Ω—Ç)
static int PIN_SSR1 = 23; // DIGITAL
static int PIN_SSR2 = 5; // DIGITAL (–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä —É—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–∞–º–µ—Ä–∏, –æ–∫—Ä–µ–º–∏–π –¥–≤–∏–≥—É–Ω)

// ===== AC-dimmer –ø—ñ–Ω-–∏ (ZeroCross —ñ –∫–∞–Ω–∞–ª–∏ DIM1/DIM2) =====
// –ü—ñ–¥—Å—Ç–∞–≤ —Ç—É—Ç —Å–≤–æ—ó —Ä–µ–∞–ª—å–Ω—ñ GPIO, —â–æ –π–¥—É—Ç—å –Ω–∞ –º–æ–¥—É–ª—å –¥–∏–º–º–µ—Ä–∞.
#define ZC_PIN    4   // –Ω—É–ª—å–æ–≤–∏–π –ø–µ—Ä–µ—Ö—ñ–¥
#define DIM1_PIN  17  // –∫–∞–Ω–∞–ª 0 –¥–∏–º–º–µ—Ä–∞ -> FAN1 (–ø—ñ–¥–¥—É–≤)
#define DIM2_PIN  18  // –∫–∞–Ω–∞–ª 1 –¥–∏–º–º–µ—Ä–∞ -> FAN3 (–≤–∏—Ç—è–∂–∫–∞)

static ProfileCfg   g_prof;
static Readings     g_rd;
static Status       g_st;
static uint32_t     g_phaseSince    = 0;
static float        g_refT_onSSR1   = NAN;
static uint32_t     g_fan1FullSince = 0;

static inline uint32_t ms(){ return millis(); }
static inline bool elapsed(uint32_t s, uint32_t d){ return (ms() - s) >= d; }

// ---- guard –¥–ª—è GPIO
static inline bool okPin(int p){ return p >= 0 && p <= 48; }
static bool chSetup[8] = {false,false,false,false,false,false,false,false};

// ---- helpers (ledc ‚Äî –∑–∞–ª–∏—à–µ–Ω–æ –¥–ª—è DC-–≤–µ–Ω—Ç–∏–ª—ñ–≤/—Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
static void pwmAttach(int ch, int pin){
  ledcSetup(ch, PWM_FREQ, PWM_RES);
  chSetup[ch] = true;
  if (okPin(pin)) ledcAttachPin(pin, ch);
}
static void pwmDetachPinSafe(int pin){
#if defined(ARDUINO) && defined(ESP32)
  #if ARDUINO_ESP32_MAJOR_VERSION >= 2
    if (okPin(pin)) ledcDetachPin(pin);
  #endif
#endif
}
static void pwmWritePct(int ch, uint8_t pct){
  if (!chSetup[ch]) return;
  uint32_t v = map(constrain(pct,0,100), 0,100, 0,255);
  ledcWrite(ch, v);
}
static void digitalOut(int pin, bool on){
  if (!okPin(pin)) return;
  pinMode(pin, OUTPUT);
  digitalWrite(pin, on?HIGH:LOW);
}

// ---- –Ñ–¥–∏–Ω–µ –º—ñ—Å—Ü–µ, —â–æ –≤–∏—Å—Ç–∞–≤–ª—è—î –≤–∏—Ö–æ–¥–∏ + –æ–Ω–æ–≤–ª—é—î g_st ----
// –¢–£–¢ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ FAN1 —Ç–∞ FAN3 –Ω–∞ AC-–¥–∏–º–º–µ—Ä (ACDimmer::setPercent).
static void setOutputs(uint8_t f1, uint8_t f2, uint8_t f3, bool s1, bool s2){
  // FAN1 ‚Äî –ø—ñ–¥–¥—É–≤ (AC –∫–∞–Ω–∞–ª –¥–∏–º–º–µ—Ä–∞ 0)
  ACDimmer::setPercent(0, f1);

  // FAN2 ‚Äî —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü—ñ—è (ON/OFF —Ä–µ–ª–µ/SSR)
  if (okPin(PIN_FAN2)) {
    pinMode(PIN_FAN2, OUTPUT);
    digitalWrite(PIN_FAN2, (f2 >= 50) ? HIGH : LOW);
  }

  // FAN3 ‚Äî –≤–∏—Ç—è–∂–∫–∞ (AC –∫–∞–Ω–∞–ª –¥–∏–º–º–µ—Ä–∞ 1)
  ACDimmer::setPercent(1, f3);

  // SSR1/SSR2 ‚Äî —Ü–∏—Ñ—Ä–æ–≤—ñ –≤–∏—Ö–æ–¥–∏ (–æ–∫—Ä–µ–º—ñ –¥–≤–∏–≥—É–Ω–∏/–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
  digitalOut(PIN_SSR1, s1);
  digitalOut(PIN_SSR2, s2);

  // –í—ñ–¥–∑–µ—Ä–∫–∞–ª—é—î–º–æ —Å—Ç–∞–Ω —É —Å—Ç–∞—Ç—É—Å
  g_st.out.fan1 = f1;
  g_st.out.fan2 = (f2 >= 50) ? 100 : 0;
  g_st.out.fan3 = f3;
  g_st.out.ssr1 = s1;
  g_st.out.ssr2 = s2;
}

static void setPhase(Phase p, const char* note){
  g_st.phase = p;
  g_st.note  = note;
  g_phaseSince = ms();
}

static void fault(const String& why){
  g_st.fault = true; g_st.fault_reason = why;
  setOutputs(100,100,100,false,false);
  setPhase(Phase::FAULT, "–ê–≤–∞—Ä—ñ—è");
}

void Control::begin(){
  // –Ø–∫—â–æ —É –∫–æ–Ω—Ñ—ñ–≥—É –∑–∞–¥–∞–Ω—ñ —ñ–Ω—à—ñ –ø—ñ–Ω–∏ ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ
  if (CFG::cfg.pins.fan1_pin) PIN_FAN1 = CFG::cfg.pins.fan1_pin;
  if (CFG::cfg.pins.fan2_pin) PIN_FAN2 = CFG::cfg.pins.fan2_pin;
  if (CFG::cfg.pins.fan3_pin) PIN_FAN3 = CFG::cfg.pins.fan3_pin;
  if (CFG::cfg.pins.ssr1_pin) PIN_SSR1 = CFG::cfg.pins.ssr1_pin;
  if (CFG::cfg.pins.ssr2_pin) PIN_SSR2 = CFG::cfg.pins.ssr2_pin;

  // 1) –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AC-–¥–∏–º–º–µ—Ä (FAN1/FAN3 —è–∫ AC)
  ACDimmer::begin(ZC_PIN, DIM1_PIN, DIM2_PIN, 50 /*–ì—Ü*/, true /* falling */);
  // –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –ø—ñ–¥–∫—Ä—É—Ç–∏ –º–µ–∂—ñ –∑–∞—Ç—Ä–∏–º–æ–∫:
  // ACDimmer::tuneDelays(200, 9000);

  // 2) –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DC-PWM –∫–∞–Ω–∞–ª—ñ–≤ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –æ–¥–∏–Ω –∑ –≤–µ–Ω—Ç—ñ–≤ ‚Äî DC)
  pwmAttach(CH_FAN1, PIN_FAN1);
  pwmAttach(CH_FAN3, PIN_FAN3);

  // 3) SSR –≤–∏—Ö–æ–¥–∏
  if (okPin(PIN_SSR1)) pinMode(PIN_SSR1, OUTPUT);
  if (okPin(PIN_SSR2)) pinMode(PIN_SSR2, OUTPUT);

  setOutputs(0,0,0,false,false);
  g_st = {};
  setPhase(Phase::IDLE, "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è");
}

void Control::applyPins(int fan1_pin, int fan2_pin, int fan3_pin, int ssr1_pin, int ssr2_pin){
  // –í—ñ–¥—á–µ–ø–∏–º–æ —Å—Ç–∞—Ä—ñ PWM, —è–∫—â–æ –±—É–ª–∏ (–¥–ª—è DC —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
  pwmDetachPinSafe(PIN_FAN1);
  pwmDetachPinSafe(PIN_FAN3);

  PIN_FAN1 = fan1_pin;
  PIN_FAN2 = fan2_pin;
  PIN_FAN3 = fan3_pin;
  PIN_SSR1 = ssr1_pin;
  PIN_SSR2 = ssr2_pin;

  pwmAttach(CH_FAN1, PIN_FAN1);
  pwmAttach(CH_FAN3, PIN_FAN3);

  if (okPin(PIN_SSR1)) pinMode(PIN_SSR1, OUTPUT);
  if (okPin(PIN_SSR2)) pinMode(PIN_SSR2, OUTPUT);

  setOutputs(0,0,0,false,false);
}

void Control::onReadings(const Readings& r){ g_rd = r; }

void Control::cmdStart(){
  g_st.fault = false; g_st.fault_reason = "";
  g_st.manual_mode = false;
  // –ü—ñ–¥ —á–∞—Å —Å—Ç–∞—Ä—Ç-—Ç–µ—Å—Ç—É: —É–≤—ñ–º–∫–Ω–µ–º–æ –≤—Å–µ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—Ä—ñ–º FAN3
  setOutputs(100,100,0,true,true);
  setPhase(Phase::START_TEST, "–°—Ç–∞—Ä—Ç/—Ç–µ—Å—Ç: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏—Ö–æ–¥—ñ–≤");
  g_refT_onSSR1 = NAN;
  g_fan1FullSince = 0;
}

void Control::cmdStop(){
  setOutputs(0,0,0,false,false);
  setPhase(Phase::IDLE, "–ó—É–ø–∏–Ω–µ–Ω–æ");
}

void Control::setManual(bool enable, uint8_t f1, uint8_t f2, uint8_t f3, bool s1, bool s2){
  g_st.manual_mode = enable;
  g_st.manual_out.fan1 = f1;
  g_st.manual_out.fan2 = f2;
  g_st.manual_out.fan3 = f3;
  g_st.manual_out.ssr1 = s1;
  g_st.manual_out.ssr2 = s2;
  if (enable) { setOutputs(f1,f2,f3,s1,s2); g_st.note = "–†–£–ß–ù–ò–ô –†–ï–ñ–ò–ú"; }
}

ProfileCfg&    Control::profile(){ return g_prof; }
const Status&  Control::getStatus(){ return g_st; }

static uint8_t clampPct(int v){ return (uint8_t)constrain(v, 0, 100); }

// --- –ü–Ü–î–î—É–≤ (FAN1): –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ T –∫–æ—Ç–ª–∞
static void control_fan1_boiler_hold(){
  if (isnan(g_rd.t_sensor)) return;
  float err = g_prof.t_boiler_set - g_rd.t_sensor;
  int base = (err > 0) ? (int)roundf(g_prof.fan1_min + g_prof.fan1_k * err)
                       : (int)g_prof.fan1_min;
  uint8_t f = clampPct(base);
  if (f < g_prof.fan1_min) f = g_prof.fan1_min;
  if (f > g_prof.fan1_max) f = g_prof.fan1_max;
  setOutputs(f, g_st.out.fan2, g_st.out.fan3, g_st.out.ssr1, g_st.out.ssr2);
}

// --- –í–ò–¢–Ø–ñ–ö–ê (FAN3): –ø–æ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ, –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–∞–ª—ñ–±—Ä–æ–≤–∫–∏
static void control_fan3_exhaust_by_rh(){
  float rh_raw = g_rd.rh;
  if (isnan(rh_raw) || rh_raw <= 0 || rh_raw > 100) return;
  float rh = Calibration::correctHumidity(rh_raw);

  float dh = rh - g_prof.rh_set;
  if (dh > 1.0f) {
    uint8_t f = min<uint8_t>(g_prof.fan3_max, g_st.out.fan3 + g_prof.fan3_step);
    if (f < g_prof.fan3_min) f = g_prof.fan3_min;
    setOutputs(g_st.out.fan1, g_st.out.fan2, f, g_st.out.ssr1, g_st.out.ssr2);
  } else if (dh < -1.0f) {
    uint8_t f = max<uint8_t>(g_prof.fan3_min, g_st.out.fan3 - g_prof.fan3_step);
    setOutputs(g_st.out.fan1, g_st.out.fan2, f, g_st.out.ssr1, g_st.out.ssr2);
  }
}

// --- SSR2 (–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä —É—Å–µ—Ä–µ–¥–∏–Ω—ñ): –ø–æ ŒîT —Ç—ñ–ª—å–∫–∏ —É —Ñ–∞–∑—ñ —Å—É—à—ñ–Ω–Ω—è
static void update_center_ssr_by_delta(){
  bool s2 = g_st.out.ssr2;

  if (!isnan(g_rd.t_top) && !isnan(g_rd.t_bottom)) {
    float d = fabsf(g_rd.t_top - g_rd.t_bottom);
    // –æ–∫—Ä–µ–º—ñ –ø–æ—Ä–æ–≥–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
    if (!s2 && d > g_prof.ssr_dT_on)   s2 = true;   // —É–≤—ñ–º–∫–Ω—É—Ç–∏ –ø—Ä–∏ ŒîT_on
    if (s2  && d < g_prof.ssr_dT_off)  s2 = false;  // –≤–∏–º–∫–Ω—É—Ç–∏ –ø—Ä–∏ ŒîT_off
    if (s2 != g_st.out.ssr2) {
      setOutputs(g_st.out.fan1, g_st.out.fan2, g_st.out.fan3, g_st.out.ssr1, s2);
    }
  }
}

void Control::tick(){
  if (g_st.manual_mode) {
    setOutputs(g_st.manual_out.fan1, g_st.manual_out.fan2, g_st.manual_out.fan3,
               g_st.manual_out.ssr1, g_st.manual_out.ssr2);
    return;
  }

  switch (g_st.phase) {
    case Phase::IDLE:
      break;

    case Phase::START_TEST:
      if (elapsed(g_phaseSince, (uint32_t)g_prof.test_sec*1000)) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ä–æ–∑–ø–∞–ª—É: FAN2 –≤–∏–º–∏–∫–∞—î–º–æ, –¥–∞–ª—ñ FAN1 –Ω–∞ –º–∞–∫—Å–∏–º—É–º
        setOutputs(100,0,0,true,true);
        g_refT_onSSR1 = g_rd.t_sensor;
        setPhase(Phase::PHASE1_IGNITION, "–†–æ–∑–ø–∞–ª");
      }
      break;

    case Phase::PHASE1_IGNITION:
      if (elapsed(g_phaseSince, (uint32_t)g_prof.phase1_sec*1000)) {
        float dT = g_rd.t_sensor - g_refT_onSSR1;
        if (isnan(dT) || dT < g_prof.dT_min) fault("–ù–µ–º–∞—î –ø—Ä–∏—Ä–æ—Å—Ç—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ —É —Ñ–∞–∑—ñ —Ä–æ–∑–ø–∞–ª—É");
        else setPhase(Phase::PHASE2_RECIRC, "–†–µ—Ü–∏—Ä–∫—É–ª—è—Ü—ñ—è");
      } else {
        setOutputs(100, 0, g_st.out.fan3, g_st.out.ssr1, g_st.out.ssr2);
      }
      break;

    case Phase::PHASE2_RECIRC:
      // üî∏ FAN2 ‚Äî –ü–†–ê–¶–Æ–Ñ –ó–ê–í–ñ–î–ò —É —Ñ–∞–∑—ñ —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü—ñ—ó
      if (g_st.out.fan2 != 100)
        setOutputs(g_st.out.fan1, 100, g_st.out.fan3, g_st.out.ssr1, g_st.out.ssr2);

      control_fan1_boiler_hold();

      if (elapsed(g_phaseSince, 60000)) {
        setPhase(Phase::PHASE3_DRYING, "–°—É—à—ñ–Ω–Ω—è");
        setOutputs(g_st.out.fan1, 100, g_prof.fan3_min, g_st.out.ssr1, g_st.out.ssr2);
        g_fan1FullSince = (g_st.out.fan1==100) ? ms() : 0;
      }
      break;

    case Phase::PHASE3_DRYING: {
      // üî∏ FAN2 ‚Äî –ü–†–ê–¶–Æ–Ñ –ó–ê–í–ñ–î–ò —É —Ñ–∞–∑—ñ —Å—É—à—ñ–Ω–Ω—è
      if (g_st.out.fan2 != 100)
        setOutputs(g_st.out.fan1, 100, g_st.out.fan3, g_st.out.ssr1, g_st.out.ssr2);

      control_fan3_exhaust_by_rh();
      control_fan1_boiler_hold();

      // SSR2 –∑–∞ ŒîT —É—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–∞–º–µ—Ä–∏
      update_center_ssr_by_delta();

      if (g_st.out.fan1==100) { if (!g_fan1FullSince) g_fan1FullSince = ms(); }
      else g_fan1FullSince = 0;

      if (g_fan1FullSince && elapsed(g_fan1FullSince, (uint32_t)g_prof.wood_end_check_sec*1000)) {
        if (!isnan(g_rd.t_sensor) && g_rd.t_sensor < g_prof.t_min_air) {
          setOutputs(0,0,0,false,false);
          setPhase(Phase::PHASE4_WOOD_END, "–î—Ä–æ–≤–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å");
        }
      }
      float t_guard = !isnan(g_rd.t_top) ? g_rd.t_top : g_rd.t_sensor;
      if (!isnan(t_guard) && t_guard > g_prof.t_prod_max) {
        setOutputs(100,100,100,false,false);
        g_st.note = "–ü–ï–†–ï–ì–†–Ü–í ‚Äî –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è";
      }
    } break;

    case Phase::PHASE4_WOOD_END:
      // –≤—Å–µ –≤–∏–º–∫–Ω–µ–Ω–æ; –æ—á—ñ–∫—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
      break;

    case Phase::FINISHED:  break;
    case Phase::FAULT:     break;
  }
}
